#!/usr/bin/env node
'use strict';

var fs = require('fs');
var marked = require('marked');
var cheerio = require('cheerio');
var yargs = require('yargs');
var path = require('path');

var chalk = require("chalk");
var Table = require("cli-table-redemption");
var CHARS = {
    top: "═",
    "top-mid": "╤",
    "top-left": "╔",
    "top-right": "╗",
    bottom: "═",
    "bottom-mid": "╧",
    "bottom-left": "╚",
    "bottom-right": "╝",
    left: "║",
    "left-mid": "╟",
    mid: "─",
    "mid-mid": "┼",
    right: "║",
    "right-mid": "╢",
    middle: "│"
};
var log = console.log;
var Output = (function () {
    function Output(options) {
        this.options = {
            versionTitleColor: chalk.bold.magentaBright,
            changeTypeColor: chalk.bold.cyanBright
        };
        // this.options = this.options
    }
    Output.prototype.addVersion = function (title) {
        title = this.options.versionTitleColor(title);
        this.table = new Table({
            chars: CHARS
        });
        this.table.push([("Version: " + title)]);
    };
    Output.prototype.addChange = function (type, items) {
        type = this.options.changeTypeColor(type);
        this.table.push([("Change: " + type)]);
        this.table.push([this.orderChangeItems(items)]);
    };
    Output.prototype.showIntro = function (intro, show) {
        if (show === void 0) { show = true; }
        this.table = this.table || new Table({
            chars: CHARS
        });
        var introTitle = chalk.bold.blue("CHANGELOG NOTE");
        this.table.push([introTitle], [intro]);
        show && this.show();
    };
    Output.prototype.showNochange = function (show) {
        if (show === void 0) { show = true; }
        this.table = new Table({
            chars: CHARS
        });
        var statusText = chalk.bold.blue("Status");
        this.table.push([statusText], ["No any change"]);
    };
    Output.prototype.show = function () {
        log(this.table.toString());
    };
    Output.prototype.orderChangeItems = function (items) {
        return items
            .map(function (item, i) {
            var order = chalk.bold.gray("" + (i + 1));
            return order + ". " + item;
        })
            .join("\n");
    };
    return Output;
}());

var readline = require("readline");
var o = new Output();
var log$1 = console.log;
var Logger = (function () {
    function Logger(loggerPath, store, options) {
        this.loggerPath = loggerPath;
        this.store = store;
        this.options = options;
    }
    Logger.prototype.getFreshVersions = function () {
        var title = this.findLoggerFile() ? fs.readFileSync(this.loggerPath).toString() : "";
        return this.store.getFreshVersions(title);
    };
    Logger.prototype.findLoggerFile = function () {
        return fs.existsSync(this.loggerPath);
    };
    Logger.prototype.wrtieLoggerFile = function () {
        var latestVersion = this.store.getLatestVersion();
        fs.writeFileSync(this.loggerPath, latestVersion.title);
    };
    Logger.prototype.log = function () {
        var _this = this;
        var freshVersions = this.getFreshVersions();
        freshVersions.forEach(function (version) {
            _this.displayVersion(version);
        });
        // If no fresh versions, it's unnecessary to enquire.
        if (freshVersions.length === 0) {
            o.showNochange();
        }
        this.options.intro && this.displayIntro();
        if (freshVersions.length > 0) {
            // If answer is Y, record this current version
            this.options.insure && this.inquiry();
        }
    };
    Logger.prototype.displayIntro = function () {
        o.showIntro(this.store.intro);
    };
    Logger.prototype.inquiry = function () {
        var _this = this;
        var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        rl.question("Do you have known all changes? (Y/n) ", function (answer) {
            if (answer != "Y") {
                _this.log();
                return false;
            }
            else {
                _this.wrtieLoggerFile();
                rl.close();
                return true;
            }
        });
    };
    Logger.prototype.displayVersion = function (version) {
        o.addVersion(version.title);
        version.changes.forEach(function (change) {
            o.addChange(change.type, change.items);
        });
        o.show();
    };
    return Logger;
}());

var ChangeTypes;
(function (ChangeTypes) {
    ChangeTypes[ChangeTypes["Added"] = "Added"] = "Added";
    ChangeTypes[ChangeTypes["Changed"] = "Changed"] = "Changed";
    ChangeTypes[ChangeTypes["Deprecated"] = "Deprecated"] = "Deprecated";
    ChangeTypes[ChangeTypes["Removed"] = "Removed"] = "Removed";
    ChangeTypes[ChangeTypes["Fixed"] = "Fixed"] = "Fixed";
    ChangeTypes[ChangeTypes["Security"] = "Security"] = "Security";
})(ChangeTypes || (ChangeTypes = {}));
var Change = (function () {
    function Change() {
        this.items = [];
    }
    Change.prototype.setType = function (text) {
        if (!(text in ChangeTypes)) {
            return false;
        }
        this.type = ChangeTypes[text];
        return true;
    };
    return Change;
}());
var Version = (function () {
    function Version(title) {
        this.changes = [];
        this.title = title;
    }
    return Version;
}());
var Store = (function () {
    function Store() {
        this._versions = [];
    }
    Store.prototype.addVersion = function (v) {
        this._versions.push(v);
    };
    Object.defineProperty(Store.prototype, "versions", {
        get: function () {
            return this._versions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "intro", {
        get: function () {
            return this._intro;
        },
        enumerable: true,
        configurable: true
    });
    Store.prototype.setIntro = function (intro) {
        this._intro = intro;
    };
    Store.prototype.getFreshVersions = function (title) {
        var freshVersions = [];
        for (var i = 0; i < this._versions.length; ++i) {
            if (this._versions[i].title === title) {
                return freshVersions;
            }
            freshVersions.push(this._versions[i]);
        }
        return freshVersions;
    };
    Store.prototype.getLatestVersion = function () {
        return this._versions[0];
    };
    return Store;
}());

var INTRO_FLAG = "h1";
var VERSION_FLAG = "h2";
var CHANGE_FLAG = "h3";
var LIST_FLAG = "ul";
var ParserStatus;
(function (ParserStatus) {
    ParserStatus[ParserStatus["INTRO"] = 0] = "INTRO";
    ParserStatus[ParserStatus["VERSION"] = 1] = "VERSION";
    ParserStatus[ParserStatus["CHANGE"] = 2] = "CHANGE";
    ParserStatus[ParserStatus["LIST"] = 3] = "LIST";
    ParserStatus[ParserStatus["END"] = 4] = "END";
})(ParserStatus || (ParserStatus = {}));
var Parser = (function () {
    function Parser(filePath, store, options) {
        this.filePath = filePath;
        this.store = store;
        this.options = options;
        this.status = ParserStatus.INTRO;
        this.introText = [];
        var marked_ = marked;
        if (!this.changelogExist()) {
            console.error(filePath + " is not existed.");
            process.exit(1);
        }
        var content = fs.readFileSync(filePath).toString();
        var html = marked_(content);
        this.$ = cheerio.load(html);
        this.currentElement = this.$("h1");
    }
    Parser.prototype.changelogExist = function () {
        return fs.existsSync(this.filePath);
    };
    Parser.prototype.parse = function () {
        var el = this.currentElement.first()[0];
        if (!el) {
            return;
        }
        var name = el.tagName;
        var stop = false;
        switch (this.status) {
            case ParserStatus.INTRO:
                if (name == VERSION_FLAG) {
                    this.pushIntroText();
                    this.status = ParserStatus.VERSION;
                    stop = true;
                    break;
                }
                // Do not add changlog title into introduction text
                name !== INTRO_FLAG && this.addIntroText();
                break;
            case ParserStatus.VERSION:
                if (name == CHANGE_FLAG) {
                    this.status = ParserStatus.CHANGE;
                    stop = true;
                    break;
                }
                if (this.currentVersion) {
                    this.pushVersion();
                }
                this.addVersion();
                break;
            case ParserStatus.CHANGE:
                this.addChange();
                this.status = ParserStatus.LIST;
                break;
            case ParserStatus.LIST:
                if (name == VERSION_FLAG) {
                    this.status = ParserStatus.VERSION;
                    this.pushChange();
                    stop = true;
                    break;
                }
                else if (name == CHANGE_FLAG) {
                    this.status = ParserStatus.CHANGE;
                    this.pushChange();
                    stop = true;
                    break;
                }
                this.addList();
                break;
            default:
                break;
        }
        if (!stop) {
            this.currentElement = this.currentElement.next();
        }
        this.parse();
    };
    Parser.prototype.pushVersion = function () {
        this.store.addVersion(this.currentVersion);
    };
    Parser.prototype.pushChange = function () {
        this.currentVersion.changes.push(this.currentChange);
    };
    Parser.prototype.addIntroText = function () {
        var el = this.currentElement.first();
        this.introText.push(el.text());
    };
    Parser.prototype.pushIntroText = function () {
        var intro = this.introText.join("\n");
        this.store.setIntro(intro);
        this.introText = [];
    };
    Parser.prototype.addVersion = function () {
        var el = this.currentElement.first();
        var name = el[0].tagName;
        if (name !== VERSION_FLAG) {
            throw "error h2";
        }
        this.currentVersion = new Version(el.text());
    };
    Parser.prototype.addChange = function () {
        var name = this.currentElement.first()[0].tagName;
        if (name !== CHANGE_FLAG) {
            throw "error h3";
        }
        this.currentChange = new Change();
        var text = this.currentElement[0].children[0].data;
        if (!this.currentChange.setType(text)) {
            throw "error set type";
        }
    };
    Parser.prototype.addList = function () {
        var _this = this;
        var name = this.currentElement.first()[0].tagName;
        if (name !== LIST_FLAG) {
            throw "error ul";
        }
        var list = this.currentElement.first().children("li");
        list.each(function (i, el) {
            _this.currentChange.items.push(_this.getLiText(el));
        });
    };
    Parser.prototype.getLiText = function (li) {
        return li.children[0].data;
    };
    return Parser;
}());

var Reminder = (function () {
    function Reminder(changelogPath, loggerPath, options) {
        this.changelogPath = changelogPath;
        this.loggerPath = loggerPath;
        this.store = new Store();
        this.options = options || {
            insure: false,
            intro: false
        };
        this.parser = new Parser(changelogPath, this.store, this.options);
        this.logger = new Logger(this.loggerPath, this.store, this.options);
    }
    Reminder.prototype.run = function () {
        this.parser.parse();
        this.logger.log();
    };
    return Reminder;
}());

var defaultChangelogFilename = "CHANGELOG";
var defaultLoggerFilename = ".changelogger";
var argv = yargs.usage("Usage: $0 [options]")
    .options({
    changelogFilename: {
        alias: "c",
        description: "<filename> changelog name",
        requiresArg: true,
        required: false,
        default: defaultChangelogFilename,
        string: true
    },
    loggerFilename: {
        alias: "l",
        description: "<filename> logger file name",
        requiresArg: true,
        required: false,
        default: defaultLoggerFilename,
        string: true
    },
    intro: {
        alias: "v",
        description: "<boolean> introduce changelog",
        required: true,
        boolean: true
    },
    insure: {
        alias: "i",
        description: "<boolean> confirmation dialog after showing changes",
        required: true,
        boolean: true
    }
})
    .help('help').alias('help', 'h').argv;
var cPath = path.join(process.cwd(), argv.changelogFilename);
var lPath = path.join(process.cwd(), argv.loggerFilename);
var changelogger = new Reminder(cPath, lPath, {
    intro: argv.intro,
    insure: argv.insure
});
changelogger.run();
